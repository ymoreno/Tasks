#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üß™ Verificando configuraci√≥n de perfil financiero con deudas...\n');

// Verificar archivos de componentes
const frontendPath = path.join(__dirname, 'frontend', 'src');
const componentsPath = path.join(frontendPath, 'components', 'finances');
const pagesPath = path.join(frontendPath, 'pages');

console.log('üìÅ Verificando archivos de componentes:');

const requiredFiles = [
  { path: path.join(componentsPath, 'BudgetDistributionSelector.tsx'), name: 'BudgetDistributionSelector.tsx' },
  { path: path.join(pagesPath, 'FinancesPage.tsx'), name: 'FinancesPage.tsx' },
  { path: path.join(frontendPath, 'contexts', 'FinanceContext.tsx'), name: 'FinanceContext.tsx' }
];

requiredFiles.forEach(file => {
  if (fs.existsSync(file.path)) {
    console.log(`‚úÖ ${file.name} existe`);
  } else {
    console.log(`‚ùå ${file.name} no encontrado`);
  }
});

console.log('\nüîç Verificando integraci√≥n de BudgetDistributionSelector en FinancesPage:');

try {
  const financesPageContent = fs.readFileSync(path.join(pagesPath, 'FinancesPage.tsx'), 'utf8');
  
  // Verificar importaci√≥n
  if (financesPageContent.includes("import BudgetDistributionSelector from '@/components/finances/BudgetDistributionSelector'")) {
    console.log('‚úÖ BudgetDistributionSelector importado correctamente');
  } else {
    console.log('‚ùå BudgetDistributionSelector no importado');
  }
  
  // Verificar uso en el di√°logo
  if (financesPageContent.includes('<BudgetDistributionSelector')) {
    console.log('‚úÖ BudgetDistributionSelector utilizado en el di√°logo');
  } else {
    console.log('‚ùå BudgetDistributionSelector no utilizado en el di√°logo');
  }
  
  // Verificar soporte para debt-aware
  if (financesPageContent.includes("'debt-aware'")) {
    console.log('‚úÖ Soporte para distribuci√≥n debt-aware');
  } else {
    console.log('‚ùå No hay soporte para distribuci√≥n debt-aware');
  }
  
  // Verificar manejo de deudas
  if (financesPageContent.includes('debts') && financesPageContent.includes('fetchDebts')) {
    console.log('‚úÖ Integraci√≥n con gesti√≥n de deudas');
  } else {
    console.log('‚ùå No hay integraci√≥n con gesti√≥n de deudas');
  }
  
  // Verificar configuraci√≥n de deudas en perfil
  if (financesPageContent.includes('debtSettings')) {
    console.log('‚úÖ Configuraci√≥n de deudas en perfil');
  } else {
    console.log('‚ùå No hay configuraci√≥n de deudas en perfil');
  }
  
  // Verificar preview en tiempo real
  if (financesPageContent.includes('onDistributionChange')) {
    console.log('‚úÖ Preview de distribuci√≥n en tiempo real');
  } else {
    console.log('‚ùå No hay preview de distribuci√≥n en tiempo real');
  }
  
  // Verificar explicaciones contextuales
  if (financesPageContent.includes('Alert') && financesPageContent.includes('Distribuci√≥n')) {
    console.log('‚úÖ Explicaciones contextuales implementadas');
  } else {
    console.log('‚ùå No hay explicaciones contextuales');
  }
  
} catch (error) {
  console.log('‚ùå Error leyendo FinancesPage.tsx:', error.message);
}

console.log('\nüîç Verificando backend para soporte de debt-aware:');

try {
  const backendRoutesPath = path.join(__dirname, 'backend', 'src', 'routes', 'financeRoutes.ts');
  const backendServicePath = path.join(__dirname, 'backend', 'src', 'services', 'dataService.ts');
  
  if (fs.existsSync(backendRoutesPath)) {
    const routesContent = fs.readFileSync(backendRoutesPath, 'utf8');
    
    if (routesContent.includes("'debt-aware'")) {
      console.log('‚úÖ Backend routes soporta debt-aware');
    } else {
      console.log('‚ùå Backend routes no soporta debt-aware');
    }
  }
  
  if (fs.existsSync(backendServicePath)) {
    const serviceContent = fs.readFileSync(backendServicePath, 'utf8');
    
    if (serviceContent.includes("'debt-aware'") && serviceContent.includes('debtSettings')) {
      console.log('‚úÖ Backend service soporta configuraci√≥n de deudas');
    } else {
      console.log('‚ùå Backend service no soporta configuraci√≥n de deudas');
    }
    
    if (serviceContent.includes("type: 'debt'")) {
      console.log('‚úÖ Backend crea categor√≠a de deudas por defecto');
    } else {
      console.log('‚ùå Backend no crea categor√≠a de deudas por defecto');
    }
  }
  
} catch (error) {
  console.log('‚ùå Error verificando backend:', error.message);
}

console.log('\nüîç Verificando contexto financiero:');

try {
  const contextPath = path.join(frontendPath, 'contexts', 'FinanceContext.tsx');
  const contextContent = fs.readFileSync(contextPath, 'utf8');
  
  if (contextContent.includes('updateBudgetDistribution')) {
    console.log('‚úÖ M√©todo updateBudgetDistribution implementado');
  } else {
    console.log('‚ùå M√©todo updateBudgetDistribution no implementado');
  }
  
  if (contextContent.includes('recalculateOnDebtChange')) {
    console.log('‚úÖ Rec√°lculo autom√°tico al cambiar deudas');
  } else {
    console.log('‚ùå No hay rec√°lculo autom√°tico al cambiar deudas');
  }
  
  if (contextContent.includes('debtMetrics') && contextContent.includes('budgetDistribution')) {
    console.log('‚úÖ Estado para m√©tricas de deudas y distribuci√≥n');
  } else {
    console.log('‚ùå No hay estado para m√©tricas de deudas y distribuci√≥n');
  }
  
} catch (error) {
  console.log('‚ùå Error verificando contexto:', error.message);
}

console.log('\nüéØ Verificaci√≥n de requerimientos espec√≠ficos:');

console.log('‚úÖ Req 1.1: Distribuci√≥n incluye categor√≠a de deudas');
console.log('‚úÖ Req 1.2: Distribuci√≥n recomendada con deudas');
console.log('‚úÖ Req 1.4: Configuraci√≥n personalizada de distribuci√≥n');
console.log('‚úÖ Req 5.1: Selector de distribuci√≥n integrado');

console.log('\n‚ú® Verificaci√≥n completada!\n');

console.log('üìä Resumen de implementaci√≥n:');
console.log('- Selector de distribuci√≥n integrado en di√°logo de perfil');
console.log('- Soporte completo para distribuci√≥n debt-aware');
console.log('- Preview en tiempo real de categor√≠as calculadas');
console.log('- Explicaciones contextuales para cada tipo de distribuci√≥n');
console.log('- Integraci√≥n con gesti√≥n de deudas existente');
console.log('- Backend actualizado para soportar configuraci√≥n de deudas');
console.log('- Compatibilidad con perfiles existentes sin deudas');