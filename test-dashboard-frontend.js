#!/usr/bin/env node

/**
 * Test script para verificar la integraci√≥n frontend del dashboard con categor√≠a de deudas
 */

const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';

async function testDashboardFrontend() {
  console.log('üß™ Iniciando pruebas de integraci√≥n frontend del dashboard...\n');

  try {
    // 1. Verificar que el backend est√© funcionando
    console.log('1. Verificando conexi√≥n con el backend...');
    await axios.get(`${API_BASE}/health`);
    console.log('‚úÖ Backend conectado correctamente\n');

    // 2. Crear un perfil financiero con distribuci√≥n inteligente (debt-aware)
    console.log('2. Creando perfil financiero con distribuci√≥n inteligente...');
    const profileData = {
      monthlyIncome: 5000000,
      distributionType: 'debt-aware'
    };

    const profileResponse = await axios.post(`${API_BASE}/finance/profile`, profileData);
    const profile = profileResponse.data.data;
    console.log('‚úÖ Perfil creado:', {
      id: profile.id,
      monthlyIncome: profile.monthlyIncome.toLocaleString('es-CO'),
      distributionType: profile.distributionType,
      categories: profile.categories.length
    });
    console.log('');

    // 3. Verificar que se cre√≥ la categor√≠a de deudas
    console.log('3. Verificando categor√≠a de deudas...');
    const debtCategory = profile.categories.find(cat => cat.type === 'debt');
    if (debtCategory) {
      console.log('‚úÖ Categor√≠a de deudas creada correctamente:', {
        name: debtCategory.name,
        type: debtCategory.type,
        percentage: debtCategory.percentage + '%',
        budgetAmount: debtCategory.budgetAmount.toLocaleString('es-CO'),
        color: debtCategory.color,
        isDebtCategory: debtCategory.isDebtCategory
      });
    } else {
      console.log('‚ùå No se encontr√≥ la categor√≠a de deudas');
      return;
    }
    console.log('');

    // 4. Verificar el orden correcto de las categor√≠as
    console.log('4. Verificando orden de categor√≠as...');
    const expectedOrder = ['necessity', 'debt', 'want', 'saving'];
    const actualOrder = profile.categories.map(cat => cat.type);
    
    console.log('Orden esperado:', expectedOrder);
    console.log('Orden actual:  ', actualOrder);
    
    const isOrderCorrect = expectedOrder.every((type, index) => actualOrder[index] === type);
    if (isOrderCorrect) {
      console.log('‚úÖ Las categor√≠as est√°n ordenadas correctamente (Necesidades, Deudas, Deseos, Ahorros)');
    } else {
      console.log('‚ùå El orden de las categor√≠as no es correcto');
    }
    console.log('');

    // 5. Verificar todas las categor√≠as y sus propiedades
    console.log('5. Verificando propiedades de todas las categor√≠as...');
    profile.categories.forEach((category, index) => {
      console.log(`   ${index + 1}. ${category.name} (${category.type}):`);
      console.log(`      - Porcentaje: ${category.percentage}%`);
      console.log(`      - Presupuesto: ${category.budgetAmount.toLocaleString('es-CO')}`);
      console.log(`      - Color: ${category.color}`);
      console.log(`      - Descripci√≥n: ${category.description || 'N/A'}`);
      if (category.type === 'debt') {
        console.log(`      - Es categor√≠a de deudas: ${category.isDebtCategory}`);
        console.log(`      - Deudas vinculadas: ${category.linkedDebts?.length || 0}`);
      }
      console.log('');
    });

    // 6. Verificar que la suma de porcentajes sea 100%
    console.log('6. Verificando distribuci√≥n de presupuesto...');
    const totalPercentage = profile.categories.reduce((sum, cat) => sum + cat.percentage, 0);
    const totalBudget = profile.categories.reduce((sum, cat) => sum + cat.budgetAmount, 0);
    
    console.log('‚úÖ Distribuci√≥n verificada:', {
      totalPercentage: totalPercentage + '%',
      totalBudget: totalBudget.toLocaleString('es-CO'),
      monthlyIncome: profile.monthlyIncome.toLocaleString('es-CO'),
      isValid: totalPercentage === 100 && Math.abs(totalBudget - profile.monthlyIncome) < 1000
    });
    console.log('');

    // 7. Obtener resumen financiero
    console.log('7. Obteniendo resumen financiero...');
    const summaryResponse = await axios.get(`${API_BASE}/finance/summary`);
    const summary = summaryResponse.data.data || summaryResponse.data;
    
    if (summary) {
      console.log('‚úÖ Resumen financiero obtenido:', {
        totalIncome: summary.totalIncome.toLocaleString('es-CO'),
        totalBudget: summary.totalBudget.toLocaleString('es-CO'),
        totalSpent: summary.totalSpent.toLocaleString('es-CO'),
        totalRemaining: summary.totalRemaining.toLocaleString('es-CO'),
        budgetUsedPercentage: Math.round((summary.totalSpent / summary.totalBudget) * 100) + '%'
      });
      
      // Verificar breakdown por categor√≠as
      if (summary.categoryBreakdown) {
        console.log('   Breakdown por categor√≠as:');
        summary.categoryBreakdown.forEach(breakdown => {
          console.log(`   - ${breakdown.categoryName}: ${breakdown.spent.toLocaleString('es-CO')} / ${breakdown.budgeted.toLocaleString('es-CO')}`);
        });
      }
    } else {
      console.log('‚ùå No se pudo obtener el resumen financiero');
    }
    console.log('');

    // 8. Crear perfil tradicional para comparar
    console.log('8. Creando perfil tradicional para comparaci√≥n...');
    const traditionalProfileData = {
      monthlyIncome: 5000000,
      distributionType: 'recommended'
    };

    const traditionalResponse = await axios.post(`${API_BASE}/finance/profile`, traditionalProfileData);
    const traditionalProfile = traditionalResponse.data.data;
    
    console.log('‚úÖ Perfil tradicional creado para comparaci√≥n:');
    console.log('   Categor√≠as tradicionales (50/30/20):');
    traditionalProfile.categories.forEach(cat => {
      console.log(`   - ${cat.name}: ${cat.percentage}%`);
    });
    
    console.log('   Categor√≠as con deudas (50/25/15/10):');
    profile.categories.forEach(cat => {
      console.log(`   - ${cat.name}: ${cat.percentage}%`);
    });
    console.log('');

    // 9. Verificar configuraci√≥n de deudas
    console.log('9. Verificando configuraci√≥n de deudas...');
    if (profile.debtSettings) {
      console.log('‚úÖ Configuraci√≥n de deudas encontrada:', {
        includeDebtCategory: profile.debtSettings.includeDebtCategory,
        minimumDebtPercentage: profile.debtSettings.minimumDebtPercentage + '%',
        currentDebtPercentage: profile.debtSettings.currentDebtPercentage + '%',
        autoCalculateFromDebts: profile.debtSettings.autoCalculateFromDebts,
        alertThresholds: {
          highDebt: profile.debtSettings.alertThresholds.highDebt + '%',
          criticalDebt: profile.debtSettings.alertThresholds.criticalDebt + '%'
        }
      });
    } else {
      console.log('‚ùå No se encontr√≥ configuraci√≥n de deudas');
    }
    console.log('');

    console.log('üéâ ¬°Todas las pruebas de integraci√≥n frontend completadas exitosamente!');
    console.log('\nüìä Funcionalidades verificadas:');
    console.log('   ‚úÖ Creaci√≥n de perfil con distribuci√≥n debt-aware');
    console.log('   ‚úÖ Categor√≠a de deudas incluida en el perfil');
    console.log('   ‚úÖ Ordenamiento correcto de categor√≠as (Necesidades, Deudas, Deseos, Ahorros)');
    console.log('   ‚úÖ Propiedades correctas de la categor√≠a de deudas');
    console.log('   ‚úÖ Distribuci√≥n de presupuesto v√°lida (suma 100%)');
    console.log('   ‚úÖ Configuraci√≥n de deudas incluida');
    console.log('   ‚úÖ Resumen financiero funcional');
    console.log('   ‚úÖ Comparaci√≥n con distribuci√≥n tradicional');
    
    console.log('\nüéØ Pr√≥ximos pasos para completar la integraci√≥n:');
    console.log('   - Implementar endpoints de deudas en el backend (tasks 9-10)');
    console.log('   - Agregar m√©tricas de deudas al resumen financiero');
    console.log('   - Implementar c√°lculo de indicadores de salud financiera');
    console.log('   - Agregar progreso hacia libertad financiera');

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error.message);
    if (error.response) {
      console.error('   Respuesta del servidor:', error.response.status, error.response.data);
    }
    process.exit(1);
  }
}

// Ejecutar las pruebas
testDashboardFrontend();